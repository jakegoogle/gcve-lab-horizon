# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

//GitHub account must be connected to Cloud Build prior to running this code.

locals {
  rds_image = {
    rds_image = {
      name               = "resource-pool-image-${formatdate("YYYYMMdd", timestamp())}-${var.vm_version}"
      zone               = "us-east1-b"
      instance_type      = "e2-medium"
      mgmt_address       = "10.0.1.101"   #Management Subnet CIDR Range
      pools_address      = "10.0.1.101"   #Resource pools Subnet CIDR Range
      image              = data.google_compute_image.windows_image.id
      disk_size          = 80
      eth0_reg           = "nane2"
    }
  }
}

/*********************************************************
 Creating FW Rules for RDS Golden Image
*********************************************************/

resource "google_compute_firewall" "iap_jumpserver_rule_" {
  project       = var.project_id
  for_each = toset([
    data.google_compute_network.ext_vpc.self_link,
    data.google_compute_network.int_vpc.self_link,
  ])
  name          = "iap-allow"
  network       = each.key
  description   = "Creates firewall rule to allow traffic to VMs from IAP"
  direction     = "INGRESS"

  allow {
    protocol    = "tcp"
    ports       = ["22", "389", "443", "3478", "3389"]
  }
 allow {
    protocol    = "udp"
    ports       = ["3478","500","4500"]
  }
  source_ranges = ["35.235.240.0/20"]
  target_tags   = ["allow-iap"]
}

/*********************************************************
 Creating RDS Golden Image
*********************************************************/
#Service Account Creation for VM

module "rds_instance_service_account" {
  source     = "terraform-google-modules/service-accounts/google//examples/single_service_account"
  prefix     = "rds-instance"
  project_id = var.project_id
}

#IAM Bindings for VM access to Google APIs

resource "google_project_iam_binding" "rds_instance_sa_bindings" {
  for_each = toset([
    "roles/iam.serviceAccountUser",
    "roles/logging.logWriter",
    "roles/monitoring.metricWriter",
    "roles/secretmanager.secretAccessor",
    "roles/storage.objectAdmin",
    "roles/cloudsql.admin",
    "roles/iap.tunnelResourceAccessor",
  ])
  role = each.key
  members = [
    "serviceAccount:${module.rds_instance_service_account.email}"
  ]
  project = var.project_id
}

#VM Deployment

data "google_compute_image" "windows_image" {
  family  = "windows-2022"
  project = "windows-cloud"
}
/*
module "vm_jumphosts" {
  source         = "github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/compute-vm?ref=v26.0.0"
  for_each       = (local.rds_image)
  project_id     = var.project_id
  zone           = each.value.zone
  name           = each.value.name
  instance_type  = each.value.instance_type
  
  tags = ["allow-iap","allow-internal","internet-allowed","gcve-mgmt-allow"]

  boot_disk = {
    initialize_params = {
      image = each.value.image
      size  = each.value.disk_size
    }
  }
  
  network_interfaces = [
  {
    network    = data.google_compute_network.pools_vpc.self_link
    subnetwork = data.google_compute_subnetwork.pools_subnetwork_$(each.value.eth0_reg).self_link
    #addresses  = { internal = each.value.internal_address }
  },
  {
    network    = data.google_compute_network.mgmt_vpc.self_link
    subnetwork = data.google_compute_subnetwork.mgmt_subnetwork_$(each.value.eth0_reg).self_link
    #addresses  = { internal = each.value.internal_address }
  }
  ]
  
  labels = {
    grp   = "rds-instance"
    grp   = "ops-agent"
    grp   = "windows-os"
  }
  
  metadata = {
    enable-osconfig = "true"
  }
  
  tags = ["allow-iap"]

  service_account        = module.rds_instance_service_account.email
  service_account_scopes = ["cloud-platform"]
  
}
*/