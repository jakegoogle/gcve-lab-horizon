/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

# tfdoc:file:description Dev spoke VPC and related resources.

locals {
  vpc = {
    "service" = {
      name = "${var.env}-svc-00"
      mtu  = "REPLICASET"
      #us-east1 subnet
      use1_name           = "svc-use1"
      use1_region         = "us-east1"
      use1_cidr           = "10.0.1.0/24"
      use1_pod_range      = "192.168.4.0/24"
      use1_services_range = "192.168.5.0/24"
      #us-central1 subnet
      usc1_name           = "svc-usc1"
      usc1_region         = "us-central1"
      usc1_cidr           = "10.0.2.0/24"
      usc1_pod_range      = "192.168.6.0/24"
      usc1_services_range = "192.168.7.0/24"
      #northamerica-northeast2 subnet
      usc1_name           = "svc-nane2"
      usc1_region         = "northamerica-northeast2"
      usc1_cidr           = "10.0.3.0/24"
      usc1_pod_range      = "192.168.8.0/24"
      usc1_services_range = "192.168.9.0/24"
      #PSA Connection
      use1_pa             = true
      gcve_psa_range      = "192.168.64.0/22"
      cloud_sql_psa_range = "192.168.68.0/22"
      genai_psa_range     = "192.168.72.0/22"
    }
  }
  region_shortnames = ["us-east1"]
}

module "vpc" {
  source = "github.com/GoogleCloudPlatform/cloud-foundation-fabric/modules/net-vpc"

  #for_each     = (local.vpc)
  project_id = var.project_id
  name       = local.vpc.service.name
  mtu        = 1500
  subnets = [
    {
      name                  = local.vpc.service.use1_name
      region                = local.vpc.service.use1_region
      ip_cidr_range         = local.vpc.service.use1_cidr
      enable_private_access = local.vpc.service.use1_pa
      secondary_ip_ranges = {
        gke-pods     = local.vpc.service.use1_pod_range
        gke-services = local.vpc.service.use1_services_range
      }
    },
    {
      name                  = local.vpc.service.usc1_name
      region                = local.vpc.service.usc1_region
      ip_cidr_range         = local.vpc.service.usc1_cidr
      secondary_ip_ranges = {
        gke-pods     = local.vpc.service.usc1_pod_range
        gke-services = local.vpc.service.usc1_services_range
      }
    }
  ]

  psa_config = {
    ranges        = { 
      gcve        = local.vpc.service.gcve_psa_range
      cloudsql    = local.vpc.service.cloud_sql_psa_range
      genai       = local.vpc.service.genai_psa_range
    }
    export_routes = true
    import_routes = true
  }
}
/*
module "mgmt-firewall" {
  source     = "github.com/GoogleCloudPlatform/cloud-foundation-fabric/modules/net-vpc-firewall"
  project_id = var.project_id
  network    = module.vpc.name
  default_rules_config = {
    disabled = true
  }
  factories_config = {
    cidr_tpl_file = "${var.factories_config.data_dir}/cidrs.yaml"
    rules_folder  = "${var.factories_config.data_dir}/firewall-rules/service"
  }
}
*/
module "firewall" {
  source     = "github.com/GoogleCloudPlatform/cloud-foundation-fabric/modules/net-vpc-firewall"
  project_id = var.project_id
  network    = module.vpc.name
  default_rules_config = {
    disabled = true
  }
  ingress_rules = {
    allow-ingress-cloud-dns = {
      description        = "Allow ingress from Cloud DNS"
      source_ranges      = ["35.199.192.0/19"]
      destination_ranges = ["10.0.0.0/8"]
    }
  }
}

module "cloudnat" {
  for_each       = toset(values(module.vpc.subnet_regions))
  source         = "github.com/GoogleCloudPlatform/cloud-foundation-fabric/modules/net-cloudnat"
  project_id     = var.project_id
  region         = each.value
  name           = "nat-gateway-${each.value}"
  router_network = module.vpc.name
  logging_filter = "ERRORS_ONLY"
}
